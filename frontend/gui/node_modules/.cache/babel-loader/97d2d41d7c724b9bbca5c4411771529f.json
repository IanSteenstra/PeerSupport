{"ast":null,"code":"\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n      message,\n      reselectPrevious,\n      range,\n      selection,\n      mark,\n      success = false;\n\n  if (!options) {\n    options = {};\n  }\n\n  debug = options.debug || false;\n\n  try {\n    reselectPrevious = deselectCurrent();\n    range = document.createRange();\n    selection = document.getSelection();\n    mark = document.createElement(\"span\");\n    mark.textContent = text; // reset user styles for span element\n\n    mark.style.all = \"unset\"; // prevents scrolling to the end of the page\n\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\"; // used to preserve spaces and line breaks\n\n    mark.style.whiteSpace = \"pre\"; // do not inherit user-select (it may be `none`)\n\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function (e) {\n      e.stopPropagation();\n\n      if (options.format) {\n        e.preventDefault();\n        e.clipboardData.clearData();\n        e.clipboardData.setData(options.format, text);\n      }\n    });\n    document.body.appendChild(mark);\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n    var successful = document.execCommand(\"copy\");\n\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;","map":{"version":3,"sources":["C:/Users/steeni/Documents/Github/TherapyNow - New/frontend/gui/node_modules/copy-to-clipboard/index.js"],"names":["deselectCurrent","require","defaultMessage","format","message","copyKey","test","navigator","userAgent","replace","copy","text","options","debug","reselectPrevious","range","selection","mark","success","document","createRange","getSelection","createElement","textContent","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","preventDefault","clipboardData","clearData","setData","body","appendChild","selectNodeContents","addRange","successful","execCommand","Error","err","console","error","warn","window","prompt","removeRange","removeAllRanges","removeChild","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,eAAe,GAAGC,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAIC,cAAc,GAAG,kCAArB;;AAEA,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AACvB,MAAIC,OAAO,GAAG,CAAC,YAAYC,IAAZ,CAAiBC,SAAS,CAACC,SAA3B,IAAwC,GAAxC,GAA8C,MAA/C,IAAyD,IAAvE;AACA,SAAOJ,OAAO,CAACK,OAAR,CAAgB,eAAhB,EAAiCJ,OAAjC,CAAP;AACD;;AAED,SAASK,IAAT,CAAcC,IAAd,EAAoBC,OAApB,EAA6B;AAC3B,MAAIC,KAAJ;AAAA,MACET,OADF;AAAA,MAEEU,gBAFF;AAAA,MAGEC,KAHF;AAAA,MAIEC,SAJF;AAAA,MAKEC,IALF;AAAA,MAMEC,OAAO,GAAG,KANZ;;AAOA,MAAI,CAACN,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,EAAV;AACD;;AACDC,EAAAA,KAAK,GAAGD,OAAO,CAACC,KAAR,IAAiB,KAAzB;;AACA,MAAI;AACFC,IAAAA,gBAAgB,GAAGd,eAAe,EAAlC;AAEAe,IAAAA,KAAK,GAAGI,QAAQ,CAACC,WAAT,EAAR;AACAJ,IAAAA,SAAS,GAAGG,QAAQ,CAACE,YAAT,EAAZ;AAEAJ,IAAAA,IAAI,GAAGE,QAAQ,CAACG,aAAT,CAAuB,MAAvB,CAAP;AACAL,IAAAA,IAAI,CAACM,WAAL,GAAmBZ,IAAnB,CAPE,CAQF;;AACAM,IAAAA,IAAI,CAACO,KAAL,CAAWC,GAAX,GAAiB,OAAjB,CATE,CAUF;;AACAR,IAAAA,IAAI,CAACO,KAAL,CAAWE,QAAX,GAAsB,OAAtB;AACAT,IAAAA,IAAI,CAACO,KAAL,CAAWG,GAAX,GAAiB,CAAjB;AACAV,IAAAA,IAAI,CAACO,KAAL,CAAWI,IAAX,GAAkB,kBAAlB,CAbE,CAcF;;AACAX,IAAAA,IAAI,CAACO,KAAL,CAAWK,UAAX,GAAwB,KAAxB,CAfE,CAgBF;;AACAZ,IAAAA,IAAI,CAACO,KAAL,CAAWM,gBAAX,GAA8B,MAA9B;AACAb,IAAAA,IAAI,CAACO,KAAL,CAAWO,aAAX,GAA2B,MAA3B;AACAd,IAAAA,IAAI,CAACO,KAAL,CAAWQ,YAAX,GAA0B,MAA1B;AACAf,IAAAA,IAAI,CAACO,KAAL,CAAWS,UAAX,GAAwB,MAAxB;AACAhB,IAAAA,IAAI,CAACiB,gBAAL,CAAsB,MAAtB,EAA8B,UAASC,CAAT,EAAY;AACxCA,MAAAA,CAAC,CAACC,eAAF;;AACA,UAAIxB,OAAO,CAACT,MAAZ,EAAoB;AAClBgC,QAAAA,CAAC,CAACE,cAAF;AACAF,QAAAA,CAAC,CAACG,aAAF,CAAgBC,SAAhB;AACAJ,QAAAA,CAAC,CAACG,aAAF,CAAgBE,OAAhB,CAAwB5B,OAAO,CAACT,MAAhC,EAAwCQ,IAAxC;AACD;AACF,KAPD;AASAQ,IAAAA,QAAQ,CAACsB,IAAT,CAAcC,WAAd,CAA0BzB,IAA1B;AAEAF,IAAAA,KAAK,CAAC4B,kBAAN,CAAyB1B,IAAzB;AACAD,IAAAA,SAAS,CAAC4B,QAAV,CAAmB7B,KAAnB;AAEA,QAAI8B,UAAU,GAAG1B,QAAQ,CAAC2B,WAAT,CAAqB,MAArB,CAAjB;;AACA,QAAI,CAACD,UAAL,EAAiB;AACf,YAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD7B,IAAAA,OAAO,GAAG,IAAV;AACD,GAxCD,CAwCE,OAAO8B,GAAP,EAAY;AACZnC,IAAAA,KAAK,IAAIoC,OAAO,CAACC,KAAR,CAAc,oCAAd,EAAoDF,GAApD,CAAT;AACAnC,IAAAA,KAAK,IAAIoC,OAAO,CAACE,IAAR,CAAa,0BAAb,CAAT;;AACA,QAAI;AACFC,MAAAA,MAAM,CAACd,aAAP,CAAqBE,OAArB,CAA6B5B,OAAO,CAACT,MAAR,IAAkB,MAA/C,EAAuDQ,IAAvD;AACAO,MAAAA,OAAO,GAAG,IAAV;AACD,KAHD,CAGE,OAAO8B,GAAP,EAAY;AACZnC,MAAAA,KAAK,IAAIoC,OAAO,CAACC,KAAR,CAAc,sCAAd,EAAsDF,GAAtD,CAAT;AACAnC,MAAAA,KAAK,IAAIoC,OAAO,CAACC,KAAR,CAAc,wBAAd,CAAT;AACA9C,MAAAA,OAAO,GAAGD,MAAM,CAAC,aAAaS,OAAb,GAAuBA,OAAO,CAACR,OAA/B,GAAyCF,cAA1C,CAAhB;AACAkD,MAAAA,MAAM,CAACC,MAAP,CAAcjD,OAAd,EAAuBO,IAAvB;AACD;AACF,GApDD,SAoDU;AACR,QAAIK,SAAJ,EAAe;AACb,UAAI,OAAOA,SAAS,CAACsC,WAAjB,IAAgC,UAApC,EAAgD;AAC9CtC,QAAAA,SAAS,CAACsC,WAAV,CAAsBvC,KAAtB;AACD,OAFD,MAEO;AACLC,QAAAA,SAAS,CAACuC,eAAV;AACD;AACF;;AAED,QAAItC,IAAJ,EAAU;AACRE,MAAAA,QAAQ,CAACsB,IAAT,CAAce,WAAd,CAA0BvC,IAA1B;AACD;;AACDH,IAAAA,gBAAgB;AACjB;;AAED,SAAOI,OAAP;AACD;;AAEDuC,MAAM,CAACC,OAAP,GAAiBhD,IAAjB","sourcesContent":["\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        e.clipboardData.clearData();\n        e.clipboardData.setData(options.format, text);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n"]},"metadata":{},"sourceType":"script"}