{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steeni\\\\Documents\\\\Github\\\\TherapyNow - New\\\\frontend\\\\gui\\\\src\\\\containers\\\\Signup.js\";\nimport React from 'react';\nimport { Form, Input, Icon, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../store/actions/auth';\nconst FormItem = Form.Item;\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          this.props.onAuth(values.userName, values.email, values.password, values.confirm);\n          this.props.history.push('/');\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, getFieldDecorator('userName', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"mail\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }),\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      style: {\n        marginRight: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Signup\"), \"Or\", React.createElement(NavLink, {\n      style: {\n        marginRight: '10px'\n      },\n      to: \"/login/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \" login\")));\n  }\n\n}\n\nconst WrappedRegistrationForm = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegistrationForm);","map":{"version":3,"sources":["C:/Users/steeni/Documents/Github/TherapyNow - New/frontend/gui/src/containers/Signup.js"],"names":["React","Form","Input","Icon","Button","connect","NavLink","actions","FormItem","Item","RegistrationForm","Component","state","confirmDirty","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","onAuth","userName","email","password","confirm","history","push","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","rules","required","message","color","type","validator","marginRight","WrappedRegistrationForm","create","mapStateToProps","loading","error","mapDispatchToProps","dispatch","username","password1","password2","authSignup"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form, Input, Icon, Button } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport * as actions from '../store/actions/auth';\r\n\r\nconst FormItem = Form.Item;\r\n\r\nclass RegistrationForm extends React.Component {\r\n    state = {\r\n        confirmDirty: false,\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                this.props.onAuth(\r\n                    values.userName,\r\n                    values.email,\r\n                    values.password,\r\n                    values.confirm\r\n                );\r\n                this.props.history.push('/');\r\n            }\r\n        });\r\n    }\r\n\r\n    handleConfirmBlur = (e) => {\r\n        const value = e.target.value;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    }\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n        if (value && value !== form.getFieldValue('password')) {\r\n            callback('Two passwords that you enter is inconsistent!');\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n        if (value && this.state.confirmDirty) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    }\r\n\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n\r\n                <FormItem>\r\n                    {getFieldDecorator('userName', {\r\n                        rules: [{ required: true, message: 'Please input your username!' }],\r\n                    })(\r\n                        <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Username\" />\r\n                    )}\r\n                </FormItem>\r\n\r\n                <FormItem>\r\n                    {getFieldDecorator('email', {\r\n                        rules: [{\r\n                            type: 'email', message: 'The input is not valid E-mail!',\r\n                        }, {\r\n                            required: true, message: 'Please input your E-mail!',\r\n                        }],\r\n                    })(\r\n                        <Input prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Email\" />\r\n                    )}\r\n                </FormItem>\r\n\r\n                <FormItem>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [{\r\n                            required: true, message: 'Please input your password!',\r\n                        }, {\r\n                            validator: this.validateToNextPassword,\r\n                        }],\r\n                    })(\r\n                        <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Password\" />\r\n                    )}\r\n                </FormItem>\r\n\r\n                <FormItem>\r\n                    {getFieldDecorator('confirm', {\r\n                        rules: [{\r\n                            required: true, message: 'Please confirm your password!',\r\n                        }, {\r\n                            validator: this.compareToFirstPassword,\r\n                        }],\r\n                    })(\r\n                        <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Password\" onBlur={this.handleConfirmBlur} />\r\n                    )}\r\n                </FormItem>\r\n\r\n                <FormItem>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: '10px' }}>\r\n                        Signup\r\n        </Button>\r\n                    Or\r\n        <NavLink\r\n                        style={{ marginRight: '10px' }}\r\n                        to='/login/'> login\r\n        </NavLink>\r\n                </FormItem>\r\n\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst WrappedRegistrationForm = Form.create()(RegistrationForm);\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.loading,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegistrationForm);\r\n"]},"metadata":{},"sourceType":"module"}